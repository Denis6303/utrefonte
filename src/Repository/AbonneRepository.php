<?php
namespace App\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * ClientRepository
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AbonneRepository extends EntityRepository {

    /**
     * Cette methode recherche la liste des abonnes 
     * 
     * @param string $locale pour la gestion multilangue
     * @return array : un tableau d'abonnes
     */
    public function findAllByLocale($locale = 'en') {
        /*
         * Variable globale recupérée depuis parameters.yml
         * $articles_per_page = $this->container->getParameter('max_articles_on_listepage');
         */

        //Make a Select query
        $query = $this->_em->createQuery('SELECT a.id as id,a.nomPrenom as nomPrenom, a.username as username, a.email as email, a.etatAbonne As etatAbonne, a.telAbonne As telAbonne FROM utbClientBundle:Abonne a ORDER BY a.id DESC');

        $query->setHint(
                \Doctrine\ORM\Query::HINT_CUSTOM_OUTPUT_WALKER, 'Gedmo\\Translatable\\Query\\TreeWalker\\TranslationWalker'
        );
        // Force the locale
        $query->setHint(
                \Gedmo\Translatable\TranslatableListener::HINT_TRANSLATABLE_LOCALE, $locale
        );
        return $query->getResult();
    }

    /**
     * Cette methode recherche un abonne precis
     * 
     * @param int $id : Identifiant de l'abonne recherche
     * @param string $locale : gestion multilangue
     * @return array : un tableau d'un suel abonne
     */
    public function findOneByLocale($id, $locale) {

        //Make a Select query
        $query = $this->_em->createQuery("SELECT a.id as id,a.nomPrenom as nomPrenom, a.username as username, a.email as email , p.libProfil as libProfil,
                                        a.telAbonne, a.celAbonne,a.adresseAbonne, a.genPsswd as genPsswd,a.password
                                        FROM utbClientBundle:Abonne a 
                                        INNER JOIN a.profil p
                                        WHERE  a.id =:id ")
                ->setParameter('id', $id);

        $query->setHint(
                \Doctrine\ORM\Query::HINT_CUSTOM_OUTPUT_WALKER, 'Gedmo\\Translatable\\Query\\TreeWalker\\TranslationWalker'
        );
        // Force the locale
        $query->setHint(
                \Gedmo\Translatable\TranslatableListener::HINT_TRANSLATABLE_LOCALE, $locale
        );
        return $query->getResult();
    }

    /**
     * Cette methode recherche un profil
     * 
     * @param int $cond : identifiant du profil
     * @return array : un tableau d'un seul profil
     */
    public function findProfil($cond) {
        //$articles_per_page = $this->container->getParameter('max_articles_on_listepage');
        //Make a Select query
        $query = $this->_em->createQuery('SELECT u.id as id,u.nomPrenom as nomPrenom, u.username as username, u.email as email, p.libProfil as libProfil FROM utbClientBundle:Client u INNER JOIN u.profil p WHERE p.id =:cond')
                ->setParameter('cond', $cond);


        return $query->getResult();
    }

    /**
     * Cette methode recherche l'existence d'un mail passe en parametre
     * est utilise pour eviter la duplication d'un mail donne
     * 
     * @param string $mail
     * @return int: le resultat de la recherche : 0 ( si mail absent) et 1 (si mail présent)
     */
    public function findByEmail($mail) {
        //$articles_per_page = $this->container->getParameter('max_articles_on_listepage');
        //Make a Select query
        $query = $this->_em->createQuery('SELECT count(u.id) FROM utbClientBundle:Abonne u 
            WHERE u.email =:mail')
                ->setParameter('mail', $mail);

        $count = 0;
        try {
            $count = $query->getSingleScalarResult();
        } catch (\Doctrine\ORM\NoResultException $e) {
            $count = 0;
        }

        return $count;
    }

    /**
     * Cette methode recherche l'existence d'un login passe en parametre.Il 
     * est utilise pour eviter la duplication d'un login donne
     * 
     * @param string $login : Pseudo de connexion 
     * @return int : le resultat de la recherche 0 ( si login absent) et 1 (si login présent)
     */
    public function findByLogin($login) {
        //$articles_per_page = $this->container->getParameter('max_articles_on_listepage');      
        //Make a Select query
        $query = $this->_em->createQuery('SELECT count(a.id) FROM utbClientBundle:Abonne a 
            WHERE a.username =:login')
                ->setParameter('login', $login);
        $count = 0;
        try {

            $count = $query->getSingleScalarResult();
        } catch (\Doctrine\ORM\NoResultException $e) {
            $count = 0;
        }

        return $count;
    }

    public function findClientAction($id) {
        //$articles_per_page = $this->container->getParameter('max_articles_on_listepage');      
        //Make a Select query
        $query = null;
        $query = $this->_em->createQuery('
                   SELECT count(a.id) FROM utbAdminBundle:Article a 
                   WHERE (a.articlePubliePar = :id) or (a.articleRestaurePar =:id) 
                   or (a.articleDepubliePar =:id) or (a.articleArchivePar =:id) 
                   or (a.articleValidePar =:id) or (a.articleAjoutPar =:id) 
                   or (a.articleModifPar =:id) or (a.articleSupprimePar =:id)')
                ->setParameter('id', $id);

        try {
            $count = $query->getSingleScalarResult();
        } catch (\Doctrine\ORM\NoResultException $e) {
            $count = 0;
        }

        return $count;
    }

    /**
     * Cette methode retourne la liste des abonnes suivant des criteres specifies
     * 
     * 
     * @param int $type : type de compte afbw - afbw2 - uweb
     * @param string $deb : date debut periode
     * @param string $fin : date fin periode
     * @param string $cpte: Numero de compte
     * @param string $username : pseudo de l'abonne
     * @param string $nomprenom : nom et prenom de l'abonne
     * @param int $gestionnaire : identifiant du gestionnaire
     * @param int $profil : Identifiant du profil
     * @param int $total : Nombre total d'elements de la requete
     * @param int $page : Numero de page en cours
     * @param int $articles_per_page : Nombre d'elements par page
     * @return array : un tableau d'abonne
     */
    public function getListeAbonnes($type, $deb, $fin, $cpte, $username, $nomprenom, $gestionnaire, $profil, $total, $page, $articles_per_page) {
        $param = array();

        $sql = 'SELECT DISTINCT a.id,a.nomPrenom,a.email,a.telAbonne,a.username,a.adresseAbonne,a.celAbonne,a.etatAbonne                           
              FROM   utbClientBundle:Abonne a 
                     LEFT JOIN a.comptes c 
                     LEFT JOIN c.fonds f
                     LEFT JOIN f.utilisateur u ';

        $sql .= ' WHERE  a.suppr = :suppr   ';

        /**  debut critères recherche  * */
        //( $type == 0 )? $sql.='' : $sql.=' AND t.id =:type ';

        ( ($deb == null) && ($fin == null) ) ? $sql.='' : $sql.=' AND a.dateCreation between :deb and :fin ';
        ( trim($cpte) == '') ? $sql.='' : $sql.=' AND c.numeroCompte = :cpte ';
        ( trim($username) == '') ? $sql.='' : $sql.=' AND lower(a.username) LIKE :username ';
        ( trim($nomprenom) == '') ? $sql.='' : $sql.=' AND lower(a.nomPrenom) LIKE :nomprenom ';
        ( $profil == 0) ? $sql.='' : $sql.=' AND p.id = :profil ';
        ( $gestionnaire == 0) ? $sql.='' : $sql.=' AND u.id = :idgestionnaire';
        /* ( $fonds == null )? $sql.='' : $sql.=' AND f.id in :fonds '; */

        /** Fin critère recherche * */
        /**  debut parametres  * */
        $param['suppr'] = 0;

        if ($type != 0) {
            $param['type'] = $type;
        }

        if ($gestionnaire != 0) {
            $param['idgestionnaire'] = $gestionnaire;
        }

        /*      if ( $fonds != null ) {
          $param['fonds']=$fonds;
          } */

        if ($profil != 0) {
            $param['profil'] = $profil;
        }

        if (trim($cpte) != '') {
            $param['cpte'] = $cpte;
        }

        if (trim($nomprenom) != '') {
            $param['nomprenom'] = "%" . $nomprenom . "%";
        }

        if (trim($username) != '') {
            $param['username'] = "%" . $username . "%";
        }

        if (($deb != null) && ($fin != null)) {
            $param['deb'] = $deb;
            $param['fin'] = $fin;
        }
        /** Fin parametres et valeur * */
        $sql.='  ORDER BY a.id DESC';

        $query = $this->_em->createQuery($sql);

        //$limit==0 ? $sql.='' :  $query->setMaxResults($limit); 

        $query->setParameters($param);
        $query->setFirstResult(($page * $articles_per_page) - $articles_per_page);
        $query->setMaxResults($articles_per_page);
        return $query->getResult();
    }
    
    
    public function getListeAbonnesCorbeille($type, $deb, $fin, $cpte, $username, $nomprenom, $gestionnaire, $profil, $total, $page, $articles_per_page) {
        $param = array();

        $sql = 'SELECT DISTINCT a.id,a.nomPrenom,a.email,a.telAbonne,a.username,a.adresseAbonne,a.celAbonne,a.etatAbonne                           
              FROM   utbClientBundle:Compte c 
                     INNER JOIN c.abonne a 
                     INNER JOIN c.fonds f
                     INNER JOIN f.utilisateur u ';

        $sql .= ' WHERE  a.suppr = :suppr   ';

        /**  debut critères recherche  * */
        //( $type == 0 )? $sql.='' : $sql.=' AND t.id =:type ';

        ( ($deb == null) && ($fin == null) ) ? $sql.='' : $sql.=' AND a.dateCreation between :deb and :fin ';
        ( trim($cpte) == '') ? $sql.='' : $sql.=' AND c.numeroCompte = :cpte ';
        ( trim($username) == '') ? $sql.='' : $sql.=' AND lower(a.username) LIKE :username ';
        ( trim($nomprenom) == '') ? $sql.='' : $sql.=' AND lower(a.nomPrenom) LIKE :nomprenom ';
        ( $profil == 0) ? $sql.='' : $sql.=' AND p.id = :profil ';
        ( $gestionnaire == 0) ? $sql.='' : $sql.=' AND u.id = :idgestionnaire';
        /* ( $fonds == null )? $sql.='' : $sql.=' AND f.id in :fonds '; */

        /** Fin critère recherche * */
        /**  debut parametres  * */
        $param['suppr'] = 2;

        if ($type != 0) {
            $param['type'] = $type;
        }

        if ($gestionnaire != 0) {
            $param['idgestionnaire'] = $gestionnaire;
        }

        /*      if ( $fonds != null ) {
          $param['fonds']=$fonds;
          } */

        if ($profil != 0) {
            $param['profil'] = $profil;
        }

        if (trim($cpte) != '') {
            $param['cpte'] = $cpte;
        }

        if (trim($nomprenom) != '') {
            $param['nomprenom'] = "%" . $nomprenom . "%";
        }

        if (trim($username) != '') {
            $param['username'] = "%" . $username . "%";
        }

        if (($deb != null) && ($fin != null)) {
            $param['deb'] = $deb;
            $param['fin'] = $fin;
        }
        /** Fin parametres et valeur * */
        $sql.='  ORDER BY a.id DESC';

        $query = $this->_em->createQuery($sql);

        //$limit==0 ? $sql.='' :  $query->setMaxResults($limit); 

        $query->setParameters($param);
        $query->setFirstResult(($page * $articles_per_page) - $articles_per_page);
        $query->setMaxResults($articles_per_page);
        return $query->getResult();
    }

    /**
     * Cette methode retourne la liste des gestionnaires d'un abonne
     * passe en parametres
     * 
     * 
     * @param int $idabonne : identifiant de l'abonne
     * @return array : tableau de gestionnaire(s)
     */
    public function getListeGestionnaireAbonne($idabonne) {
        $sql = 'SELECT DISTINCT a.nomPrenom,a.id,a.email,a.telAbonne,a.username,a.adresseAbonne,a.celAbonne,a.etatAbonne,u.nomPrenom as nomgest,u.id as idgest                            
              FROM   utbClientBundle:Compte c 
                     INNER JOIN c.abonne a 
                     INNER JOIN c.fonds f
                     INNER JOIN f.utilisateur u 
              WHERE  a.id =:id ORDER BY a.id DESC';
        $query = $this->_em->createQuery($sql);

        $query->setParameter('id', $idabonne);
        return $query->getResult();
    }

    /**
     * Cette methode retourne la liste des abonnes d'un gestionnaire passe en parametre
     * 
     * @param int $idgest : Identifiant du gestionnaire
     * @return array: tableau d'un seul gestionnaire
     */
    public function getListeAbonneGestionnaire($idgest) {

        $sql = 'SELECT DISTINCT a.nomPrenom,a.id as id,a.email,a.telAbonne,a.username,a.adresseAbonne,a.celAbonne,a.etatAbonne,u.nomPrenom as nomgest,u.id as idgest                            
              FROM   utbClientBundle:Compte c 
                     INNER JOIN c.abonne a 
                     INNER JOIN c.fonds f
                     INNER JOIN f.utilisateur u 
              WHERE  u.id =:id AND a.etatAbonne=1 ORDER BY a.id DESC';

        $query = $this->_em->createQuery($sql);

        $query->setParameter('id', $idgest);
        return $query->getResult();
    }

    /**
     * Cette methode retourne la liste des abonnes d'un gestionnaire ayant un profil donne
     * 
     * $idgestionnaire : id de l'utilisteur/gestionnaire connecté 
     * $idprofilgestionnaire : id du profil gestionnaire(4)
     */
    public function getMesAbonnes($idgestionnaire, $idprofilgestionnaire) {
        $param = array();

        $sql = 'SELECT DISTINCT a.nomPrenom,a.id,a.email,a.telAbonne,a.username,a.adresseAbonne,a.celAbonne,a.etatAbonne,u.nomPrenom as nomgest,u.id as idgest                            
              FROM   utbClientBundle:Compte c 
                     INNER JOIN c.abonne a 
                     INNER JOIN c.fonds f
                     INNER JOIN f.utilisateur u 
              WHERE  u.id =:id AND u.profil =:idprofil AND a.etatAbonne=1 ORDER BY a.id DESC';

        $query = $this->_em->createQuery($sql);

        $query->setParameters(array('id' => $idgestionnaire, 'idprofil' => $idprofilgestionnaire));
        return $query->getResult();
    }

    /**
     * Cette methode retourne un abonne possedant le couple (login,password)
     * 
     * @param type $login: pseudo de connexion d'un abonne
     * @param type $pwd : password d'un abonne
     * @return array : Un tableau d'un seul abonne
     */
    public function findAbonne($login, $pwd) {

        $query = $this->_em->createQuery('SELECT a.id, a.username, a.nomPrenom, a.email,p.id as idprofil, p.libProfil
            FROM utbClientBundle:Abonne a 
            INNER JOIN a.profil p
            WHERE a.username =:login AND a.password=:pwd AND a.etatAbonne<>0')
                ->setParameter('login', $login)
                ->setParameter('pwd', $pwd);
        return $query->getResult();
    }

    /**
     * Cette methode retourne un abonne possedant eventuellement le login passe en parametre
     * 
     * @param type $login : pseudo de connexion de l'abonne
     * @return array : un tableau d'un seul abonne
     */
    public function findAbonneByLogin($login) {
        $query = $this->_em->createQuery('SELECT a.id, a.username, a.nomPrenom, a.email, a.etatAbonne FROM utbClientBundle:Abonne a 
            WHERE a.username =:login')
                ->setParameter('login', $login);
        return $query->getResult();
    }

    /**
     * Cette methode retourne les fonds de commerce auxquels appartient un abonne
     * 
     * @param type $idabonne : Identifiant de l'abonne 
     * @return array:  Un tableau de fonds de commerce
     */
    public function findFondsAbonne($idabonne) {
        //$articles_per_page = $this->container->getParameter('max_articles_on_listepage');      
        //Make a Select query
        $query = $this->_em->createQuery('SELECT    f.id                                                    
                                          FROM      utbClientBundle:Abonne a 
                                                    INNER JOIN a.comptes c 
                                                    INNER JOIN c.typeCompte t                                                
                                                    INNER JOIN c.fonds f                   
                                                    Where a.id =:id  ')
                ->setParameter('id', $idabonne);
        /* $count = 0;        
          try {
          $count = $query->getSingleScalarResult();
          } catch (\Doctrine\ORM\NoResultException $e) {
          $count = 0;
          } */
        return $query->getResult();
    }

    /**
     * Cette methode retourne les fonds de commerce auxquels appartient un abonne
     * 
     * @param type $idabonne : Identifiant de l'abonne 
     * @return array:  Un tableau de fonds de commerce
     */
    public function findLeFondsAbonne($idabonne) {
        //$articles_per_page = $this->container->getParameter('max_articles_on_listepage');      
        //Make a Select query
        $query = $this->_em->createQuery('SELECT    distinct(f.id)                                                    
                                          FROM      utbClientBundle:Abonne a 
                                                    INNER JOIN a.comptes c 
                                                    INNER JOIN c.typeCompte t                                                
                                                    INNER JOIN c.fonds f                   
                                                    Where a.id =:id  ')
                ->setParameter('id', $idabonne);
        /* $count = 0;        
          try {
          $count = $query->getSingleScalarResult();
          } catch (\Doctrine\ORM\NoResultException $e) {
          $count = 0;
          } */
        return $query->getResult();
    }
    
    /**
     * Cette methode retourne le nombre d'abonnes suivant des criteres specifies
     * 
     * 
     * @param int $type : type de compte afbw - afbw2 - uweb
     * @param string $deb : date debut periode
     * @param string $fin : date fin periode
     * @param string $cpte: Numero de compte
     * @param string $username : pseudo de l'abonne
     * @param string $nomprenom : nom et prenom de l'abonne
     * @param int $gestionnaire : identifiant du gestionnaire
     * @param int $profil : Identifiant du profil
     * @param int $total : Nombre total d'elements de la requete
     * @param int $page : Numero de page en cours
     * @param int $articles_per_page : Nombre d'elements par page
     * @return array : un tableau d'abonne
     */
    public function getTotalAbonneLocale($type, $deb, $fin, $cpte, $username, $nomprenom, $gestionnaire, $profil) {
        $param = array();

        $sql = 'SELECT DISTINCT a.nomPrenom,a.id,a.email,a.telAbonne,a.username,a.adresseAbonne,a.celAbonne,a.etatAbonne                           
              FROM   utbClientBundle:Compte c 
                     INNER JOIN c.abonne a 
                     INNER JOIN c.fonds f
                     INNER JOIN f.utilisateur u ';

        $sql .= ' WHERE  a.suppr = :suppr   ';

        /**  debut critères recherche  * */
        ( $type == 0 ) ? $sql.='' : $sql.=' AND t.id =:type ';

        ( ($deb == null) && ($fin == null) ) ? $sql.='' : $sql.=' AND a.dateCreation between :deb and :fin ';

        ( trim($cpte) == '') ? $sql.='' : $sql.=' AND c.numeroCompte = :cpte ';

        ( trim($username) == '') ? $sql.='' : $sql.=' AND lower(a.username) LIKE :username ';

        ( trim($nomprenom) == '') ? $sql.='' : $sql.=' AND lower(a.nomPrenom) LIKE :nomprenom ';

        ( $profil == 0) ? $sql.='' : $sql.=' AND p.id = :profil ';

        ( $gestionnaire == 0) ? $sql.='' : $sql.=' AND u.id = :idgestionnaire';



        /* ( $fonds == null )? $sql.='' : $sql.=' AND f.id in :fonds '; */

        /** Fin critère recherche * */
        /**  debut parametres  * */
        $param['suppr'] = 0;

        if ($type != 0) {
            $param['type'] = $type;
        }

        if ($gestionnaire != 0) {
            $param['idgestionnaire'] = $gestionnaire;
        }

        /*      if ( $fonds != null ) {
          $param['fonds']=$fonds;
          } */

        if ($profil != 0) {
            $param['profil'] = $profil;
        }

        if (trim($cpte) != '') {
            $param['cpte'] = $cpte;
        }

        if (trim($nomprenom) != '') {
            $param['nomprenom'] = "%" . $nomprenom . "%";
        }

        if (trim($username) != '') {
            $param['username'] = "%" . $username . "%";
        }

        if (($deb != null) && ($fin != null)) {
            $param['deb'] = $deb;
            $param['fin'] = $fin;
        }
        /** Fin parametres et valeur * */
        $query = $this->_em->createQuery($sql);
        $sql.='  ORDER BY a.id DESC';
        //$limit==0 ? $sql.='' :  $query->setMaxResults($limit); 

        $query->setParameters($param);

        return count($query->getResult());
    }
	
    public function getTotalAbonneCorbeilleLocale($type, $deb, $fin, $cpte, $username, $nomprenom, $gestionnaire, $profil) {
        $param = array();

        $sql = 'SELECT DISTINCT a.nomPrenom,a.id,a.email,a.telAbonne,a.username,a.adresseAbonne,a.celAbonne,a.etatAbonne                           
              FROM   utbClientBundle:Compte c 
                     INNER JOIN c.abonne a 
                     INNER JOIN c.fonds f
                     INNER JOIN f.utilisateur u ';

        $sql .= ' WHERE  a.suppr = :suppr   ';

        /**  debut critères recherche  * */
        ( $type == 0 ) ? $sql.='' : $sql.=' AND t.id =:type ';

        ( ($deb == null) && ($fin == null) ) ? $sql.='' : $sql.=' AND a.dateCreation between :deb and :fin ';

        ( trim($cpte) == '') ? $sql.='' : $sql.=' AND c.numeroCompte = :cpte ';

        ( trim($username) == '') ? $sql.='' : $sql.=' AND lower(a.username) LIKE :username ';

        ( trim($nomprenom) == '') ? $sql.='' : $sql.=' AND lower(a.nomPrenom) LIKE :nomprenom ';

        ( $profil == 0) ? $sql.='' : $sql.=' AND p.id = :profil ';

        ( $gestionnaire == 0) ? $sql.='' : $sql.=' AND u.id = :idgestionnaire';



        /* ( $fonds == null )? $sql.='' : $sql.=' AND f.id in :fonds '; */

        /** Fin critère recherche * */
        /**  debut parametres  * */
        $param['suppr'] = 2;

        if ($type != 0) {
            $param['type'] = $type;
        }

        if ($gestionnaire != 0) {
            $param['idgestionnaire'] = $gestionnaire;
        }       

        if ($profil != 0) {
            $param['profil'] = $profil;
        }

        if (trim($cpte) != '') {
            $param['cpte'] = $cpte;
        }

        if (trim($nomprenom) != '') {
            $param['nomprenom'] = "%" . $nomprenom . "%";
        }

        if (trim($username) != '') {
            $param['username'] = "%" . $username . "%";
        }

        if (($deb != null) && ($fin != null)) {
            $param['deb'] = $deb;
            $param['fin'] = $fin;
        }
        /** Fin parametres et valeur * */
        $query = $this->_em->createQuery($sql);
        $sql.='  ORDER BY a.id DESC';
        //$limit==0 ? $sql.='' :  $query->setMaxResults($limit); 

        $query->setParameters($param);

        return count($query->getResult());
    }

    /**
     * Cette methode retourne le nombre d'abonnes suivant des criteres specifies
     * 
     * 
     * @param int $type : type de compte afbw - afbw2 - uweb
     * @param string $deb : date debut periode
     * @param string $fin : date fin periode
     * @param string $cpte: Numero de compte
     * @param string $username : pseudo de l'abonne
     * @param string $nomprenom : nom et prenom de l'abonne
     * @param int $gestionnaire : identifiant du gestionnaire
     * @param int $profil : Identifiant du profil
     * @param int $total : Nombre total d'elements de la requete
     * @param int $page : Numero de page en cours
     * @param int $articles_per_page : Nombre d'elements par page
     * @return array : un tableau d'abonne
     */
    public function getAbonneChoisiLocale($nomprenom) {
        $param = array();

        $sql = 'SELECT DISTINCT a.nomPrenom,a.id,a.email,a.telAbonne,a.username,a.adresseAbonne,a.celAbonne,a.etatAbonne                           
              FROM   utbClientBundle:Compte c 
                     INNER JOIN c.abonne a 
                     INNER JOIN c.fonds f
                     INNER JOIN f.utilisateur u ';
        $sql .= ' WHERE  a.suppr = 0   ';
        ( trim($nomprenom) == '') ? $sql.='' : $sql.=' AND lower(a.nomPrenom) LIKE :nomprenom ';

        if (trim($nomprenom) != '') {
            $param['nomprenom'] = "%" . $nomprenom . "%";
        }

        $query = $this->_em->createQuery($sql);
        $sql.='  ORDER BY a.id DESC';

        $query->setParameters($param);

        return $query->getResult();
    }

    public function getTotalAbonneFondsLocale($fonds) {
        $param = array();

        $sql = 'SELECT DISTINCT a.nomPrenom,a.id,a.email,a.telAbonne,a.username,a.adresseAbonne,a.celAbonne,a.etatAbonne                           
              FROM   utbClientBundle:Compte c 
                     INNER JOIN c.abonne a 
                     INNER JOIN c.fonds f
                     INNER JOIN f.utilisateur u
               WHERE  a.suppr = :suppr  AND f.id = :fonds ORDER BY a.id DESC';

        $query = $this->_em->createQuery($sql);
        $query->setParameters(array('suppr' => 0, 'fonds' => $fonds));
        return count($query->getResult());
    }

    public function getListeAbonnesFonds($fonds, $total, $page, $articles_per_page) {
        $param = array();

        $sql = 'SELECT DISTINCT a.id,a.nomPrenom,a.email,a.telAbonne,a.username,a.adresseAbonne,a.celAbonne,a.etatAbonne                           
              FROM   utbClientBundle:Compte c 
                     INNER JOIN c.abonne a 
                     INNER JOIN c.fonds f
                     INNER JOIN f.utilisateur u 
              WHERE  a.suppr = :suppr AND f.id = :fonds  ORDER BY a.id DESC';


        $query = $this->_em->createQuery($sql);

        $query->setParameters(array('suppr' => 0, 'fonds' => $fonds));
        $query->setFirstResult(($page * $articles_per_page) - $articles_per_page);
        $query->setMaxResults($articles_per_page);
        return $query->getResult();
    }

}
