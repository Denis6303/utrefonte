<?php

namespace App\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * ArticleRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ArticleRepository extends EntityRepository
{

    /**
     *  Methode pour avoir la liste des articles d'une rubrique
     * 
     * Table(s):  Rubrique
     * 
     * @param <string> $locale : Variable passee pour gerer le multilingue sur le site
     * @param <integer> $type :   Variable pour avoir l'identifiant de la rubrique  dans laquelle se trouve l'article
     * 
     * @return <string> return le  resultat d'une requete
     * 
     */
    public function getListeByRubriqueLocale($type, $locale = 'en')
    {

        //Make a Select query
        $query = $this->getEntityManager()->createQuery('SELECT r,a  FROM App\Entity\Article a 
                                          INNER JOIN a.rubrique r WHERE  r.id =:type  
                                          AND a.corbeilleArticle=0 AND a.archiveArticle=0 AND trim(a.titreArticle) !=:vide ');
        $query->setParameters(array('type' => $type, 'vide' => ''));

        $query->setHint(
            \Doctrine\ORM\Query::HINT_CUSTOM_OUTPUT_WALKER,
            'Gedmo\\Translatable\\Query\\TreeWalker\\TranslationWalker'
        );
        // Force the locale
        $query->setHint(
            \Gedmo\Translatable\TranslatableListener::HINT_TRANSLATABLE_LOCALE,
            $locale
        );
        return $query->getResult();
    }

    /**
     *  Methode pour avoir la liste des articles d'une rubrique
     * 
     * Table(s):  Rubrique
     * 
     * @param <string> $locale : Variable passee pour gerer le multilingue sur le site
     * @param <integer> $type :   Variable pour avoir l'identifiant de la rubrique  dans laquelle se trouve l'article
     * @param <integer> $limit :  Variable intervenant dans la pagination
     * 
     * @return <string> return le  resultat d'une requete
     * 
     */
    public function getListeByParentRubriqueLocale($type, $limit, $locale = 'en')
    {
        $param = array();
        //Make a Select query
        $sql = 'SELECT r.id as idrubrique,r.nomRubrique,a.titreArticle,a.introTexteArticle,a.descriptionArticle, a.typePre as typePre ,r.descriptionRubrique,m.urlMedia  FROM App\Entity\Article a 
                                          INNER JOIN a.rubrique r INNER JOIN a.medias m WHERE  r.parent =:type  AND a.statutArticle=4
                                          AND a.corbeilleArticle=0 AND a.archiveArticle=0 AND trim(a.titreArticle) !=:vide ';
        //$sql.=' GROUP BY r.id ';
        $param['type'] = $type;
        $param['vide'] = '';

        $query = $this->getEntityManager()->createQuery($sql);
        $limit == 0 ? $sql .= '' : $query->setMaxResults($limit);;

        $query->setParameters($param);

        $query->setHint(
            \Doctrine\ORM\Query::HINT_CUSTOM_OUTPUT_WALKER,
            'Gedmo\\Translatable\\Query\\TreeWalker\\TranslationWalker'
        );
        // Force the locale
        $query->setHint(
            \Gedmo\Translatable\TranslatableListener::HINT_TRANSLATABLE_LOCALE,
            $locale
        );
        return $query->getResult();
    }

    /**
     *  Methode pour avoir la liste des articles d'une rubrique
     * 
     * Table(s):  Rubrique
     * 
     * @param <string> $locale : Variable passee pour gerer le multilingue sur le site
     * @param <integer> $type :   Variable pour avoir l'identifiant de la rubrique  dans laquelle se trouve l'article
     * @param <integer> $limit :  Variable intervenant dans la pagination
     * 
     * @return <string> return le  resultat d'une requete
     * 
     */
    public function getListeByParentRubriqueAccueilLocale($type, $limit, $locale = 'en')
    {
        $param = array();
        //Make a Select query
        $sql = 'SELECT r.id as idrubrique,r.nomRubrique,a.titreArticle,a.introTexteArticle,a.descriptionArticle,m.urlMedia  FROM App\Entity\Article a 
                                          INNER JOIN a.rubrique r INNER JOIN a.medias m WHERE  r.parent =:type  AND a.statutArticle=4
                                          AND a.corbeilleArticle=0 AND a.archiveArticle=0 AND trim(a.titreArticle) !=:vide AND a.afficheAccueil=1 ';

        $param['type'] = $type;
        $param['vide'] = '';

        $query = $this->getEntityManager()->createQuery($sql);
        $limit == 0 ? $sql .= '' : $query->setMaxResults($limit);;

        $query->setParameters($param);

        $query->setHint(
            \Doctrine\ORM\Query::HINT_CUSTOM_OUTPUT_WALKER,
            'Gedmo\\Translatable\\Query\\TreeWalker\\TranslationWalker'
        );
        // Force the locale
        $query->setHint(
            \Gedmo\Translatable\TranslatableListener::HINT_TRANSLATABLE_LOCALE,
            $locale
        );
        return $query->getResult();
    }

    /**
     *  Methode pour avoir la liste des articles dans une rubrique sur la page oneRubrique.html.twig 
     * 
     * Table(s):  Rubrique, Article
     * 
     * @param <string> $locale : Variable passee pour gerer le multilingue sur le site
     * @param <integer> $type :  Variable pour avoir l'identifiant de la rubrique  dans laquelle se trouve l'article
     * @param <integer> $page :  Variable intervenant dans la pagination
     * @param <integer> $total :  Nombre total d'article
     * @param <integer> $articles_per_page :  Nombre d'article par page
     * 
     * @return <string> return le  resultat d'une requete
     * 
     */
    public function findAllArticleByLocale($type, $locale, $total, $page, $articles_per_page)
    {
        //Make a Select query 
        $query = $this->getEntityManager()->createQuery('SELECT a.id as id, a.titreArticle as titreArticle,
                                         a.descriptionArticle as descriptionArticle,a.introTexteArticle as introTexteArticle,a.afficheAccueil,
                                         a.articleDateAjout as articleDateAjout, a.articleAjoutPar as articleAjoutPar,
                                         a.statutArticle as statutArticle, r.id as idRubrique,a.archiveArticle As archiveArticle
                                         ,a.corbeilleArticle As corbeilleArticle
                                         FROM App\Entity\Article a INNER JOIN a.rubrique r
                                         WHERE r.id =:type AND a.archiveArticle=:arch AND a.corbeilleArticle=:corb 
                                         and trim(a.titreArticle) !=:vide
                                         ORDER BY a.ordre,id DESC');
        $query->setParameters(array('type' => $type, 'arch' => 0, 'corb' => 0, 'vide' => ''));

        $query->setFirstResult(($page * $articles_per_page) - $articles_per_page);
        $query->setMaxResults($articles_per_page);

        $query->setHint(
            \Doctrine\ORM\Query::HINT_CUSTOM_OUTPUT_WALKER,
            'Gedmo\\Translatable\\Query\\TreeWalker\\TranslationWalker'
        );
        // Force the locale
        $query->setHint(
            \Gedmo\Translatable\TranslatableListener::HINT_TRANSLATABLE_LOCALE,
            $locale
        );
        return $query->getResult();
    }

    /**
     *  Methode pour avoir la liste des articles sur la page listeArticle.html.twig 
     * 
     * Table(s):  Rubrique, Article, Media
     * 
     * @param <string> $locale : Variable passee pour gerer le multilingue sur le site
     * @param <integer> $id :   Identifiant de l'article
     * 
     * @return <string> return le  resultat d'une requete 
     * 
     */
    public function findOneByLocale($id, $locale)
    {
        //Make a Select query
        $query = $this->getEntityManager()->createQuery('SELECT a.id as id, a.titreArticle as titreArticle,a.referenceArticle as referenceArticle,a.urlArticle as urlArticle,
                                         a.descriptionArticle as descriptionArticle,a.introTexteArticle as introTexteArticle,a.articleAjoutPar as articleAjoutPar,
                                         a.articleDateAjout as articleDateAjout, a.typePre as typePre ,a.articleModifPar as articleModifPar,a.articleDateModif as articleDateModif,
                                         a.articleDateValide as articleDateValide,a.articlePubliePar as articlePubliePar,a.archiveArticle,
                                         a.articleValidePar as articleValidePar,a.articleDatePublie as articleDatePublie,a.corbeilleArticle,a.afficheDatePublie as afficheDatePublie,
                                         a.afficheAuteur as afficheAuteur,a.afficheReference as afficheReference, r.id as idRubrique,r.nomRubrique as nomRubrique ,m.id as idMedia, m.urlMedia as urlMedia,m.nomMedia as nomMedia,
                                         m.typeMedia as typeMedia, m.illustreImgMedia as illustreImgMedia,a.statutArticle as statutArticle
                                         FROM App\Entity\Article a INNER JOIN a.medias m INNER JOIN a.rubrique r
                                         WHERE a.id = :id and m.illustreImgMedia =1 
                                         ORDER BY a.ordre,a.id DESC ');
        $query->setParameter('id', $id);

        $query->setHint(
            \Doctrine\ORM\Query::HINT_CUSTOM_OUTPUT_WALKER,
            'Gedmo\\Translatable\\Query\\TreeWalker\\TranslationWalker'
        );
        // Force the locale
        $query->setHint(
            \Gedmo\Translatable\TranslatableListener::HINT_TRANSLATABLE_LOCALE,
            $locale
        );
        return $query->getResult();
    }

    /**
     *  Methode pour avoir la liste des articles sur la page listeArticle.html.twig 
     * 
     * Table(s):  Rubrique, Article, Media
     * 
     * @param <string> $locale : Variable passee pour gerer le multilingue sur le site
     * @param <integer> $id :   Identifiant de l'article
     * 
     * @return <string> return le  resultat d'une requete 
     * 
     */
    public function findOneByAccueil($id, $locale)
    {
        //Make a Select query
        $query = $this->getEntityManager()->createQuery('SELECT a.id as id, a.titreArticle as titreArticle,a.referenceArticle as referenceArticle,a.urlArticle as urlArticle,
                                         a.descriptionArticle as descriptionArticle ,a.introTexteArticle as introTexteArticle,r.typePresentation,p.id as idparent,                                     
                                         r.id as idRubrique,r.nomRubrique as nomRubrique ,m.id as idMedia, m.urlMedia as urlMedia,m.nomMedia as nomMedia,
                                         m.typeMedia as typeMedia, m.illustreImgMedia as illustreImgMedia,a.statutArticle as statutArticle,p.idgrandparent                                         
                                         FROM App\Entity\Article a INNER JOIN a.medias m INNER JOIN a.rubrique r INNER JOIN r.parent p
                                         WHERE a.id = :id and m.illustreImgMedia =1  AND a.statutArticle = 4
                                         
                                         ORDER BY a.ordre,a.id DESC ');
        $query->setParameter('id', $id);

        $query->setHint(
            \Doctrine\ORM\Query::HINT_CUSTOM_OUTPUT_WALKER,
            'Gedmo\\Translatable\\Query\\TreeWalker\\TranslationWalker'
        );
        // Force the locale
        $query->setHint(
            \Gedmo\Translatable\TranslatableListener::HINT_TRANSLATABLE_LOCALE,
            $locale
        );
        return $query->getResult();
    }

    //pour les cadres
    public function findOneByLocale2($id, $locale)
    {
        //Make a Select query
        $query = $this->getEntityManager()->createQuery('SELECT a.id as id,a.titreArticle as titreArticle,a.introTexteArticle,a.descriptionArticle as descriptionArticle FROM App\Entity\Article a WHERE a.id = :id');
        $query->setParameter('id', $id);

        $query->setHint(
            \Doctrine\ORM\Query::HINT_CUSTOM_OUTPUT_WALKER,
            'Gedmo\\Translatable\\Query\\TreeWalker\\TranslationWalker'
        );
        // Force the locale
        $query->setHint(
            \Gedmo\Translatable\TranslatableListener::HINT_TRANSLATABLE_LOCALE,
            $locale
        );
        return $query->getSingleResult();
    }

    /**
     *  Methode pour avoir la liste des articles de la meme rubrqiue a retrouve sur le twig oneArticle.html.twig 
     * 
     * Table(s):  Rubrique, Article
     * 
     * @param <string> $locale : Variable passee pour gerer le multilingue sur le site
     * @param <integer> $id :   Identifiant de l'article
     * @param <integer> $type : Identifiant de la rubrique de l'article
     * 
     * @return <string> return le  resultat d'une requete 
     * 
     */
    public function listeMemeRubriqueLocale($type, $locale = 'en', $id = "")
    {
        //Make a Select query
        $query = $this->getEntityManager()->createQuery('SELECT a.id as id, a.titreArticle as titreArticle,a.referenceArticle as referenceArticle,a.urlArticle as urlArticle,
                                            a.descriptionArticle as descriptionArticle,a.introTexteArticle as introTexteArticle,a.articleAjoutPar as articleAjoutPar,
                                            a.articleDateAjout as articleDateAjout,a.articleModifPar as articleModifPar,a.articleDateModif as articleDateModif,
                                            a.articleDateValide as articleDateValide,a.articlePubliePar as articlePubliePar,
                                            a.articleValidePar as articleValidePar,a.articleDatePublie as articleDatePublie,a.afficheDatePublie as afficheDatePublie,
                                            a.afficheAuteur as afficheAuteur, a.typePre as typePre ,a.afficheReference as afficheReference, r.id as idRubrique,r.nomRubrique as nomRubrique ,m.id as idMedia, m.urlMedia as urlMedia,m.nomMedia as nomMedia,
                                            m.typeMedia as typeMedia, m.illustreImgMedia as illustreImgMedia,a.statutArticle as statutArticle,
                                            a.archiveArticle as archiveArticle, a.corbeilleArticle as corbeilleArticle
                                          FROM App\Entity\Article a INNER JOIN a.medias m INNER JOIN a.rubrique r
                                          FROM utbAdminBundle:Article a INNER JOIN a.medias m INNER JOIN a.rubrique r
                                          WHERE  r.id =:type and a.id <>:id AND a.archiveArticle=0 AND a.corbeilleArticle=0 
                                          and trim(a.titreArticle) !=:vide
                                          ORDER BY a.ordre,a.id DESC');

        $query->setParameters(array('type' => $type, 'id' => $id, 'vide' => ''));
        $query->setHint(
            \Doctrine\ORM\Query::HINT_CUSTOM_OUTPUT_WALKER,
            'Gedmo\\Translatable\\Query\\TreeWalker\\TranslationWalker'
        );
        // Force the locale
        $query->setHint(
            \Gedmo\Translatable\TranslatableListener::HINT_TRANSLATABLE_LOCALE,
            $locale
        );
        return $query->getResult();
    }

    /**
     *  Methode pour la liste des medias (documents, images ) lie a une article
     * 
     * Table(s):  Rubrique, Article
     * 
     * @param <string>  $locale : Variable passee pour gerer le multilingue sur le site
     * @param <integer> $id :   Identifiant de l'article
     * @param <integer> $condition : 1- Pour une image | 2- Pour un document
     * 
     * @return <string> return le  resultat d'une requete 
     * 
     */
    public function getListeMedia($id, $condition, $locale)
    {

        $query = $this->getEntityManager()->createQuery('SELECT a.id as id, m.id as idMedia, m.urlMedia as urlMedia, m.nomMedia as nomMedia
                                          FROM App\Entity\Article a INNER JOIN a.medias m
                                          WHERE a.id = :id and m.typeMedia = :cond');
        $query->setParameters(array('id' => $id, 'cond' => $condition));
        $query->setHint(
            \Doctrine\ORM\Query::HINT_CUSTOM_OUTPUT_WALKER,
            'Gedmo\\Translatable\\Query\\TreeWalker\\TranslationWalker'
        );
        // Force the locale
        $query->setHint(
            \Gedmo\Translatable\TranslatableListener::HINT_TRANSLATABLE_LOCALE,
            $locale
        );

        //var_dump($query->getResult());
        return $query->getResult();
    }

    /**
     *  Methode pour la liste des medias (documents, images ) lie a une article
     * 
     * Table(s):  Rubrique, Article
     * 
     * @param <string>  $locale : Variable passee pour gerer le multilingue sur le site
     * @param <integer> $id :   Identifiant de l'article
     * @param <integer> $condition : 1- Pour une image | 2- Pour un document
     * 
     * @return <string> return le  resultat d'une requete 
     * 
     */
    public function getListeMediaIllust($id, $condition, $locale)
    {

        $query = $this->getEntityManager()->createQuery('SELECT a.id as id, m.id as idMedia, m.urlMedia as urlMedia, m.nomMedia as nomMedia
                                          FROM App\Entity\Article a INNER JOIN a.medias m
                                          WHERE a.id = :id and m.typeMedia = :cond and m.illustreImgMedia = 1');
        $query->setParameters(array('id' => $id, 'cond' => $condition));
        $query->setHint(
            \Doctrine\ORM\Query::HINT_CUSTOM_OUTPUT_WALKER,
            'Gedmo\\Translatable\\Query\\TreeWalker\\TranslationWalker'
        );
        // Force the locale
        $query->setHint(
            \Gedmo\Translatable\TranslatableListener::HINT_TRANSLATABLE_LOCALE,
            $locale
        );

        //var_dump($query->getResult());
        return $query->getResult();
    }

    /**
     *  Methode pour avoir l'image illustrative d'une article
     * 
     * Table(s):  Rubrique, Article
     * 
     * @param <string>  $locale : Variable passee pour gerer le multilingue sur le site
     * @param <integer> $id :   Identifiant de l'article
     * @param <integer> $condition : 1- Pour une image | 2- Pour un document
     * 
     * @return <string> return le  resultat d'une requete 
     * 
     */
    public function getImageUllistreMedia($id, $condition, $locale)
    {

        $query = $this->getEntityManager()->createQuery('SELECT a.id as id, m.id as idMedia, m.urlMedia as urlMedia  FROM App\Entity\Article a INNER JOIN a.medias m
            WHERE a.id = :id and m.typeMedia = :cond and m.illustreImgMedia = 1');
        $query->setParameters(array('id' => $id, 'cond' => $condition));

        $query->setHint(
            \Doctrine\ORM\Query::HINT_CUSTOM_OUTPUT_WALKER,
            'Gedmo\\Translatable\\Query\\TreeWalker\\TranslationWalker'
        );
        // Force the locale
        $query->setHint(
            \Gedmo\Translatable\TranslatableListener::HINT_TRANSLATABLE_LOCALE,
            $locale
        );

        return $query->getResult();
    }

    /**
     *  Methode pour avoir la liste des articles sur la page listeArticle.html.twig 
     * 
     * Table(s):  Rubrique, Article
     * 
     * @param <string> $locale : Variable passee pour gerer le multilingue sur le site
     * @param <integer>  $page :  Variable intervenant dans la pagination
     * @param <integer> $total :  Nombre total d'article
     * @param <integer> $articles_per_page :  Nombre d'article par page
     * 
     * @return <string> return le  resultat d'une requete
     * 
     */
    public function findAllByLocale($locale, $total, $page, $articles_per_page)
    {
        $query = $this->getEntityManager()->createQuery('SELECT r.id as idrubrique,r.nomRubrique as nomRubrique,
                                         a.id as id, a.titreArticle as titreArticle, a.descriptionArticle as descriptionArticle,
                                         a.introTexteArticle as introTexteArticle,a.articleDateAjout as articleDateAjout,
                                         a.articleAjoutPar as articleAjoutPar,a.statutArticle as statutArticle,
                                         a.archiveArticle as archiveArticle, a.corbeilleArticle as corbeilleArticle
                                         FROM App\Entity\Article a INNER JOIN a.rubrique r
                                         WHERE a.archiveArticle=0 AND a.corbeilleArticle=0 AND trim(a.titreArticle) !=:vide
                                         ORDER BY a.ordre,a.id DESC');
        $query->setParameter('vide', '');
        $query->setFirstResult(($page * $articles_per_page) - $articles_per_page);
        $query->setMaxResults($articles_per_page);

        $query->setHint(
            \Doctrine\ORM\Query::HINT_CUSTOM_OUTPUT_WALKER,
            'Gedmo\\Translatable\\Query\\TreeWalker\\TranslationWalker'
        );
        // Force the locale
        $query->setHint(
            \Gedmo\Translatable\TranslatableListener::HINT_TRANSLATABLE_LOCALE,
            $locale
        );
        return $query->getResult();
    }

    /**
     *  Methode pour avoir la liste des articles sur la page listeArticle.html.twig 
     * 
     * Table(s):  Rubrique, Article
     * 
     * @author Edem
     * 
     * @param <string> $locale : Variable passee pour gerer le multilingue sur le site
     * @param <integer>  $page :  Variable intervenant dans la pagination
     * @param <integer> $total :  Nombre total d'article
     * @param <integer> $articles_per_page :  Nombre d'article par page
     * 
     * @return <string> return le  resultat d'une requete
     * 
     */
    public function findAllRecentByLocale($locale = 'en', $total, $page, $articles_per_page)
    {
        $query = $this->getEntityManager()->createQuery('SELECT r.id as idrubrique,r.nomRubrique as nomRubrique,
                                         a.id as id, a.titreArticle as titreArticle, a.descriptionArticle as descriptionArticle,
                                         a.introTexteArticle as introTexteArticle,a.articleDateAjout as articleDateAjout,
                                         a.articleAjoutPar as articleAjoutPar,a.statutArticle as statutArticle,
                                         a.archiveArticle as archiveArticle, a.corbeilleArticle as corbeilleArticle
                                         FROM App\Entity\Article a INNER JOIN a.rubrique r
                                         WHERE a.archiveArticle=0 AND a.corbeilleArticle=0 AND trim(a.titreArticle) !=:vide
                                         ORDER BY a.articleDateAjout DESC');
        $query->setFirstResult(($page * $articles_per_page) - $articles_per_page);
        $query->setMaxResults($articles_per_page);

        $query->setHint(
            \Doctrine\ORM\Query::HINT_CUSTOM_OUTPUT_WALKER,
            'Gedmo\\Translatable\\Query\\TreeWalker\\TranslationWalker'
        );
        // Force the locale
        $query->setHint(
            \Gedmo\Translatable\TranslatableListener::HINT_TRANSLATABLE_LOCALE,
            $locale
        );
        return $query->getResult();
    }

    /**
     *  Methode pour avoir le nombre d'article dans la corbeille
     * 
     * Table(s):  Rubrique, Article
     * 
     * @author Edem
     * 
     * @param <string> $locale : Variable passee pour gerer le multilingue sur le site
     * 
     * @return <string> return le  count du resultat d'une requete
     * 
     */
    public function getTotalListeCorbeilleLocale($locale)
    {
        $query = $this->getEntityManager()->createQuery('SELECT r.id as idrubrique,r.nomRubrique as nomRubrique,
                                         a.id as id, a.titreArticle as titreArticle, a.descriptionArticle as descriptionArticle,
                                         a.introTexteArticle as introTexteArticle,a.articleDateAjout as articleDateAjout,
                                         a.articleAjoutPar as articleAjoutPar,a.statutArticle as statutArticle,
                                         a.archiveArticle as archiveArticle, a.corbeilleArticle as corbeilleArticle
                                         FROM App\Entity\Article a INNER JOIN a.rubrique r
                                         WHERE a.corbeilleArticle=1 AND trim(a.titreArticle) !=:vide');
        $query->setParameter('vide', '');
        $query->setHint(
            \Doctrine\ORM\Query::HINT_CUSTOM_OUTPUT_WALKER,
            'Gedmo\\Translatable\\Query\\TreeWalker\\TranslationWalker'
        );
        // Force the locale
        $query->setHint(
            \Gedmo\Translatable\TranslatableListener::HINT_TRANSLATABLE_LOCALE,
            $locale
        );
        return count($query->getResult());
    }

    /**
     *  Methode pour avoir le nombre d'article dans la corbeille dans une rubrique
     * 
     * Table(s):  Rubrique, Article, Media
     * 
     * @author Edem
     * 
     * @param <string> $locale : Variable passee pour gerer le multilingue sur le site
     * @param <integer> $type : id de la rubrique dans laquelle se trouve l'article.
     * 
     * @return <string> return le  count du resultat d'une requete
     * 
     */
    public function getTotalListeCorbeilleRubriqueLocale($type, $locale = 'en')
    {
        $query = $this->getEntityManager()->createQuery('SELECT r.id as idrubrique,r.nomRubrique as nomRubrique,
                                         a.id as id, a.titreArticle as titreArticle, a.descriptionArticle as descriptionArticle,
                                         a.introTexteArticle as introTexteArticle,a.articleDateAjout as articleDateAjout,
                                         a.articleAjoutPar as articleAjoutPar,a.statutArticle as statutArticle,
                                         a.archiveArticle as archiveArticle, a.corbeilleArticle as corbeilleArticle
                                         FROM App\Entity\Article a INNER JOIN a.rubrique r
                                         WHERE r.id =:type AND a.corbeilleArticle=1 AND trim(a.titreArticle) !=:vide');
        $query->setParameters(array('type' => $type, 'vide' => ''));

        $query->setHint(
            \Doctrine\ORM\Query::HINT_CUSTOM_OUTPUT_WALKER,
            'Gedmo\\Translatable\\Query\\TreeWalker\\TranslationWalker'
        );
        // Force the locale
        $query->setHint(
            \Gedmo\Translatable\TranslatableListener::HINT_TRANSLATABLE_LOCALE,
            $locale
        );
        return count($query->getResult());
    }

    /**
     *  Methode pour avoir le nombre d'article dans la Soumis dans une rubrique
     * 
     * Table(s):  Rubrique, Article, Media
     * 
     * @author Edem
     * 
     * @param <string> $locale : Variable passee pour gerer le multilingue sur le site
     * @param <integer> $type : id de la rubrique dans laquelle se trouve l'article.
     * 
     * @return <string> return le  count du resultat d'une requete
     * 
     */
    public function getTotalListeSoumisRubriqueLocale($type, $locale = 'en')
    {
        $query = $this->getEntityManager()->createQuery('SELECT r.id as idrubrique,r.nomRubrique as nomRubrique,
                                         a.id as id, a.titreArticle as titreArticle, a.descriptionArticle as descriptionArticle,
                                         a.introTexteArticle as introTexteArticle,a.articleDateAjout as articleDateAjout,
                                         a.articleAjoutPar as articleAjoutPar,a.statutArticle as statutArticle,
                                         a.archiveArticle as archiveArticle, a.corbeilleArticle as corbeilleArticle
                                         FROM App\Entity\Article a INNER JOIN a.rubrique r
                                         WHERE r.id =:type AND a.statutArticle=2 AND trim(a.titreArticle) !=:vide');
        $query->setParameters(array('type' => $type, 'vide' => ''));

        $query->setHint(
            \Doctrine\ORM\Query::HINT_CUSTOM_OUTPUT_WALKER,
            'Gedmo\\Translatable\\Query\\TreeWalker\\TranslationWalker'
        );
        // Force the locale
        $query->setHint(
            \Gedmo\Translatable\TranslatableListener::HINT_TRANSLATABLE_LOCALE,
            $locale
        );
        return count($query->getResult());
    }

    /**
     *  Methode pour avoir le nombre d'article en Attente dans une rubrique
     * 
     * Table(s):  Rubrique, Article, Media
     * 
     * @author Edem
     * 
     * @param <string> $locale : Variable passee pour gerer le multilingue sur le site
     * @param <integer> $type : id de la rubrique dans laquelle se trouve l'article.
     * 
     * @return <string> return le  count du resultat d'une requete
     * 
     */
    public function getTotalListeAttenteRubriqueLocale($type, $locale = 'en')
    {
        $query = $this->getEntityManager()->createQuery('SELECT r.id as idrubrique,r.nomRubrique as nomRubrique,
                                         a.id as id, a.titreArticle as titreArticle, a.descriptionArticle as descriptionArticle,
                                         a.introTexteArticle as introTexteArticle,a.articleDateAjout as articleDateAjout,
                                         a.articleAjoutPar as articleAjoutPar,a.statutArticle as statutArticle,
                                         a.archiveArticle as archiveArticle, a.corbeilleArticle as corbeilleArticle
                                         FROM App\Entity\Article a INNER JOIN a.rubrique r
                                         WHERE r.id =:type AND a.statutArticle=3 AND trim(a.titreArticle) !=:vide');
        $query->setParameters(array('type' => $type, 'vide' => ''));

        $query->setHint(
            \Doctrine\ORM\Query::HINT_CUSTOM_OUTPUT_WALKER,
            'Gedmo\\Translatable\\Query\\TreeWalker\\TranslationWalker'
        );
        // Force the locale
        $query->setHint(
            \Gedmo\Translatable\TranslatableListener::HINT_TRANSLATABLE_LOCALE,
            $locale
        );
        return count($query->getResult());
    }

    /**
     *  Methode pour avoir le nombre d'article dans la corbeille dans une rubrique
     * 
     * Table(s):  Rubrique, Article, Media
     * 
     * @author Edem
     * 
     * @param <string> $locale : Variable passee pour gerer le multilingue sur le site
     * @param <integer> $type : id de la rubrique dans laquelle se trouve l'article.
     * 
     * @return <string> return le  count du resultat d'une requete
     * 
     */
    public function getTotalListeArchiveRubriqueLocale($type, $locale = 'en')
    {
        $query = $this->getEntityManager()->createQuery('SELECT r.id as idrubrique,r.nomRubrique as nomRubrique,
                                         a.id as id, a.titreArticle as titreArticle, a.descriptionArticle as descriptionArticle,
                                         a.introTexteArticle as introTexteArticle,a.articleDateAjout as articleDateAjout,
                                         a.articleAjoutPar as articleAjoutPar,a.statutArticle as statutArticle,
                                         a.archiveArticle as archiveArticle, a.corbeilleArticle as corbeilleArticle
                                         FROM App\Entity\Article a INNER JOIN a.rubrique r
                                         WHERE r.id =:type AND a.archiveArticle=1 AND trim(a.titreArticle) !=:vide');
        $query->setParameters(array('type' => $type, 'vide' => ''));

        $query->setHint(
            \Doctrine\ORM\Query::HINT_CUSTOM_OUTPUT_WALKER,
            'Gedmo\\Translatable\\Query\\TreeWalker\\TranslationWalker'
        );
        // Force the locale
        $query->setHint(
            \Gedmo\Translatable\TranslatableListener::HINT_TRANSLATABLE_LOCALE,
            $locale
        );
        return count($query->getResult());
    }

    /**
     *  Methode pour avoir la liste des articles de la corbeille sur la page listeArticleCorbeille.html.twig 
     * 
     * Table(s):  Rubrique, Article, Media
     * 
     * @param <string> $locale : Variable passee pour gerer le multilingue sur le site
     * @param <integer> $type :  Variable pour avoir l'identifiant de la rubrique  dans laquelle se trouve l'article
     * @param <integer> $page :  Variable intervenant dans la pagination
     * @param <integer> $total :  Nombre total d'article
     * @param <integer> $articles_per_page :  Nombre d'article par page
     * 
     * @return <string> return le  resultat d'une requete
     * 
     */
    public function findAllByLocaleCorbeille($locale = 'en', $total, $page, $articles_per_page)
    {
        $query = $this->getEntityManager()->createQuery('SELECT r.id as idrubrique,r.nomRubrique as nomRubrique,
            a.id as id, a.titreArticle as titreArticle, a.statutArticle as statutArticle,
            a.descriptionArticle as descriptionArticle,a.introTexteArticle,a.articleAjoutPar as articleAjoutPar,
            a.articleDateAjout as articleDateAjout, m.urlMedia as urlMedia,m.typeMedia as typeMedia
            FROM utbAdminBundle:Article a INNER JOIN a.rubrique r  INNER JOIN a.medias m
            WHERE m.illustreImgMedia=1 AND a.archiveArticle!=1 AND a.corbeilleArticle=1 
            AND trim(a.titreArticle) !=:vide
            ORDER BY a.ordre,a.id DESC');

        $query->setParameter('vide', '');
        $query->setFirstResult(($page * $articles_per_page) - $articles_per_page);
        $query->setMaxResults($articles_per_page);

        $query->setHint(
            \Doctrine\ORM\Query::HINT_CUSTOM_OUTPUT_WALKER,
            'Gedmo\\Translatable\\Query\\TreeWalker\\TranslationWalker'
        );

        // Force the locale
        $query->setHint(
            \Gedmo\Translatable\TranslatableListener::HINT_TRANSLATABLE_LOCALE,
            $locale
        );
        return $query->getResult();
    }

    /**
     *  Methode pour avoir la liste des articles de la corbeille dans une rubrique sur la page oneRubriqueCorbeille.html.twig 
     * 
     * Table(s):  Rubrique, Article, Media
     * 
     * @param <string> $locale : Variable passee pour gerer le multilingue sur le site
     * @param <integer> $type :  Variable pour avoir l'identifiant de la rubrique  dans laquelle se trouve l'article
     * @param <integer> $page :  Variable intervenant dans la pagination
     * @param <integer> $total :  Nombre total d'article
     * @param <integer> $articles_per_page :  Nombre d'article par page
     * 
     * @return <string> return le  resultat d'une requete
     * 
     */
    public function findAllArticleByLocaleCorbeille($type, $locale = 'en', $total, $page, $articles_per_page)
    {
        $query = $this->getEntityManager()->createQuery('SELECT r.id as idrubrique,r.nomRubrique as nomRubrique,
            a.id as id, a.titreArticle as titreArticle, a.statutArticle as statutArticle,
            a.descriptionArticle as descriptionArticle,a.introTexteArticle,a.articleAjoutPar as articleAjoutPar,
            a.articleDateAjout as articleDateAjout, m.urlMedia as urlMedia,m.typeMedia as typeMedia
            FROM utbAdminBundle:Article a INNER JOIN a.rubrique r  INNER JOIN a.medias m
            WHERE m.illustreImgMedia=1 AND a.archiveArticle!=1 AND a.corbeilleArticle=1 AND  r.id=:type
            AND trim(a.titreArticle) !=:vide
            ORDER BY a.ordre,a.id DESC');
        $query->setParameters(array('type' => $type, 'vide' => ''));
        $query->setFirstResult(($page * $articles_per_page) - $articles_per_page);
        $query->setMaxResults($articles_per_page);

        $query->setHint(
            \Doctrine\ORM\Query::HINT_CUSTOM_OUTPUT_WALKER,
            'Gedmo\\Translatable\\Query\\TreeWalker\\TranslationWalker'
        );
        // Force the locale
        $query->setHint(
            \Gedmo\Translatable\TranslatableListener::HINT_TRANSLATABLE_LOCALE,
            $locale
        );
        return $query->getResult();
    }

    /**
     *  Methode pour avoir la liste des articles soumis pour validation  dans une rubrique sur la page oneRubriqueSoumis.html.twig 
     * 
     * Table(s):  Rubrique, Article, Media
     * 
     * @param <string> $locale : Variable passee pour gerer le multilingue sur le site
     * @param <integer> $type :  Variable pour avoir l'identifiant de la rubrique  dans laquelle se trouve l'article
     * @param <integer> $page :  Variable intervenant dans la pagination
     * @param <integer> $total :  Nombre total d'article
     * @param <integer> $articles_per_page :  Nombre d'article par page
     * 
     * @return <string> return le  resultat d'une requete
     * 
     */
    public function findAllArticleByLocaleSoumis($type, $locale = 'en', $total, $page, $articles_per_page)
    {
        $query = $this->getEntityManager()->createQuery('SELECT r.id as idrubrique,r.nomRubrique as nomRubrique,
            a.id as id, a.titreArticle as titreArticle, a.statutArticle as statutArticle,
            a.descriptionArticle as descriptionArticle,a.introTexteArticle,a.articleAjoutPar as articleAjoutPar,
            a.articleDateAjout as articleDateAjout, m.urlMedia as urlMedia,m.typeMedia as typeMedia
            FROM utbAdminBundle:Article a INNER JOIN a.rubrique r  INNER JOIN a.medias m
            WHERE a.corbeilleArticle=0 AND a.archiveArticle=0 AND a.statutArticle=2 and trim(a.titreArticle) !=:vide
            AND r.id=:type ORDER BY a.ordre,a.id DESC');
        $query->setParameters(array('type' => $type, 'vide' => ''));
        $query->setFirstResult(($page * $articles_per_page) - $articles_per_page);
        $query->setMaxResults($articles_per_page);

        $query->setHint(
            \Doctrine\ORM\Query::HINT_CUSTOM_OUTPUT_WALKER,
            'Gedmo\\Translatable\\Query\\TreeWalker\\TranslationWalker'
        );
        // Force the locale
        $query->setHint(
            \Gedmo\Translatable\TranslatableListener::HINT_TRANSLATABLE_LOCALE,
            $locale
        );
        return $query->getResult();
    }

    /**
     *  Methode pour avoir la liste des articles en attente de publication   dans une rubrique sur la page oneRubriqueAttente.html.twig 
     * 
     * Table(s):  Rubrique, Article, Media
     * 
     * @param <string> $locale : Variable passee pour gerer le multilingue sur le site
     * @param <integer> $type :  Variable pour avoir l'identifiant de la rubrique  dans laquelle se trouve l'article
     * @param <integer> $page :  Variable intervenant dans la pagination
     * @param <integer> $total :  Nombre total d'article
     * @param <integer> $articles_per_page :  Nombre d'article par page
     * 
     * @return <string> return le  resultat d'une requete
     * 
     */
    public function findAllArticleByLocaleAttente($type, $locale = 'en', $total, $page, $articles_per_page)
    {
        $query = $this->getEntityManager()->createQuery('SELECT r.id as idrubrique,r.nomRubrique as nomRubrique,
            a.id as id, a.titreArticle as titreArticle, a.statutArticle as statutArticle,
            a.descriptionArticle as descriptionArticle,a.introTexteArticle,a.articleAjoutPar as articleAjoutPar,
            a.articleDateAjout as articleDateAjout, m.urlMedia as urlMedia,m.typeMedia as typeMedia
            FROM utbAdminBundle:Article a INNER JOIN a.rubrique r  INNER JOIN a.medias m 
            WHERE a.corbeilleArticle=0 AND a.archiveArticle=0 AND a.statutArticle=3 and trim(a.titreArticle) !=:vide 
            AND r.id=:type ORDER BY a.ordre,a.id DESC');
        $query->setParameters(array('type' => $type, 'vide' => ''));
        $query->setFirstResult(($page * $articles_per_page) - $articles_per_page);
        $query->setMaxResults($articles_per_page);

        $query->setHint(
            \Doctrine\ORM\Query::HINT_CUSTOM_OUTPUT_WALKER,
            'Gedmo\\Translatable\\Query\\TreeWalker\\TranslationWalker'
        );
        // Force the locale
        $query->setHint(
            \Gedmo\Translatable\TranslatableListener::HINT_TRANSLATABLE_LOCALE,
            $locale
        );
        return $query->getResult();
    }

    /**
     *  Methode pour avoir le total des articles en attente de publication
     * 
     * Table(s):  Rubrique, Article, Media
     * 
     * @param <string> $locale : Variable passee pour gerer le multilingue sur le site
     * 
     * @return <string> return le  count du resultat d'une requete
     * 
     */
    public function getTotalAttenteLocale($locale = 'en')
    {
        $query = $this->getEntityManager()->createQuery('SELECT r.id as idrubrique,
            r.nomRubrique as nomRubrique, a.id as id, a.titreArticle as titreArticle,
            a.descriptionArticle as descriptionArticle,a.introTexteArticle,a.articleDateAjout as articleDateAjout,
            m.urlMedia as urlMedia FROM utbAdminBundle:Article a INNER JOIN a.rubrique r  INNER JOIN a.medias m
            WHERE a.corbeilleArticle=0 AND a.archiveArticle=0 AND a.statutArticle=3 and trim(a.titreArticle) !=:vide 
            ORDER BY a.ordre,a.id DESC');
        $query->setParameter('vide', '');
        $query->setHint(
            \Doctrine\ORM\Query::HINT_CUSTOM_OUTPUT_WALKER,
            'Gedmo\\Translatable\\Query\\TreeWalker\\TranslationWalker'
        );
        // Force the locale
        $query->setHint(
            \Gedmo\Translatable\TranslatableListener::HINT_TRANSLATABLE_LOCALE,
            $locale
        );
        return count($query->getResult());
    }

    /**
     *  Methode pour avoir la liste des articles en attente de publication   listeArticleAttente.html.twig 
     * 
     * Table(s):  Rubrique, Article, Media
     * 
     * @param <string> $locale : Variable passee pour gerer le multilingue sur le site
     * @param <integer> $page :  Variable intervenant dans la pagination
     * @param <integer> $total :  Nombre total d'article
     * @param <integer> $articles_per_page :  Nombre d'article par page
     * 
     * @return <string> return le  resultat d'une requete
     * 
     */
    public function findAllByLocaleAttente($locale = 'en', $total, $page, $articles_per_page)
    {
        $query = $this->getEntityManager()->createQuery('SELECT r.id as idrubrique,r.nomRubrique as nomRubrique,
            a.id as id, a.titreArticle as titreArticle, a.descriptionArticle as descriptionArticle,a.introTexteArticle,
            a.articleDateAjout as articleDateAjout,a.statutArticle as statutArticle,
            a.articleAjoutPar as articleAjoutPar,m.urlMedia as urlMedia
            FROM utbAdminBundle:Article a INNER JOIN a.rubrique r  INNER JOIN a.medias m
            WHERE a.corbeilleArticle=0 AND a.archiveArticle=0 AND a.statutArticle=3 and trim(a.titreArticle) !=:vide AND 
            m.illustreImgMedia=1 
            ORDER BY a.ordre,a.id DESC');

        $query->setParameter('vide', '');
        $query->setFirstResult(($page * $articles_per_page) - $articles_per_page);
        $query->setMaxResults($articles_per_page);

        $query->setHint(
            \Doctrine\ORM\Query::HINT_CUSTOM_OUTPUT_WALKER,
            'Gedmo\\Translatable\\Query\\TreeWalker\\TranslationWalker'
        );
        // Force the locale
        $query->setHint(
            \Gedmo\Translatable\TranslatableListener::HINT_TRANSLATABLE_LOCALE,
            $locale
        );
        return $query->getResult();
    }

    /**
     *  Methode pour avoir la liste des articles en recement publies listeArticleAttente.html.twig 
     * 
     * Table(s):  Rubrique, Article, Media
     * 
     * @param <string> $locale : Variable passee pour gerer le multilingue sur le site
     * 
     * @return <string> return le  resultat d'une requete
     * 
     */
    public function findAllByLocaleRecent($locale = 'en')
    {
        $query = $this->getEntityManager()->createQuery('SELECT r.id as idrubrique,r.nomRubrique as nomRubrique, a.id as id,a.statutArticle as statutArticle,
                                          a.titreArticle as titreArticle,a.articleAjoutPar as articleAjoutPar, a.descriptionArticle as descriptionArticle,a.introTexteArticle,
                                          a.articleDateAjout as articleDateAjout, m.urlMedia as urlMedia,m.typeMedia as typeMedia
                                          FROM utbAdminBundle:Article a INNER JOIN a.rubrique r  INNER JOIN a.medias m 
                                          WHERE m.illustreImgMedia=1 AND a.statutArticle != 5 AND a.statutArticle = 4 
                                          and m.illustreImgMedia=1 and trim(a.titreArticle) !=:vide 
                                          ORDER BY a.ordre,a.id DESC ');

        $query->setParameter('vide', '');
        $query->setFirstResult(0);
        $query->setMaxResults(5);

        $query->setHint(
            \Doctrine\ORM\Query::HINT_CUSTOM_OUTPUT_WALKER,
            'Gedmo\\Translatable\\Query\\TreeWalker\\TranslationWalker'
        );
        // Force the locale
        $query->setHint(
            \Gedmo\Translatable\TranslatableListener::HINT_TRANSLATABLE_LOCALE,
            $locale
        );
        return $query->getResult();
    }

    /**
     *  Methode pour avoir la liste des articles en recement publies listeArticleAttente.html.twig 
     * 
     * Table(s):  Rubrique, Article, Media
     * 
     * @param <string> $locale : Variable passee pour gerer le multilingue sur le site
     * 
     * @return <string> return le  resultat d'une requete
     * 
     */
    public function findAllByLocaleAttente5($locale = 'en')
    {

        $query = $this->getEntityManager()->createQuery('SELECT r.id as idrubrique,r.nomRubrique as nomRubrique,
            a.id as id, a.titreArticle as titreArticle, a.descriptionArticle as descriptionArticle,
            a.statutArticle as statutArticle,a.introTexteArticle,
            a.articleDateAjout as articleDateAjout,a.articleAjoutPar as articleAjoutPar, m.urlMedia as urlMedia
            FROM utbAdminBundle:Article a INNER JOIN a.rubrique r  INNER JOIN a.medias m
            WHERE a.corbeilleArticle=0 AND a.archiveArticle=0 AND m.illustreImgMedia=1 
            and trim(a.titreArticle) !=:vide
            AND a.statutArticle=3 ORDER BY a.ordre,a.id DESC');
        $query->setParameter('vide', '');

        $query->setFirstResult(0);
        $query->setMaxResults(5);

        $query->setHint(
            \Doctrine\ORM\Query::HINT_CUSTOM_OUTPUT_WALKER,
            'Gedmo\\Translatable\\Query\\TreeWalker\\TranslationWalker'
        );
        // Force the locale
        $query->setHint(
            \Gedmo\Translatable\TranslatableListener::HINT_TRANSLATABLE_LOCALE,
            $locale
        );
        return $query->getResult();
    }

    /**
     *  Methode pour avoir le total des articles sur le twig listeArticle.twig
     * 
     * Table(s):  Rubrique, Article, Media
     * 
     * @param <string> $locale : Variable passee pour gerer le multilingue sur le site
     * 
     * @return <string> return le  count du resultat d'une requete
     * 
     */
    public function getTotalArticleLocale($locale)
    {
        $query = $this->getEntityManager()->createQuery('SELECT r.id as idrubrique,r.nomRubrique as nomRubrique,
            a.id as id, a.titreArticle as titreArticle, a.statutArticle as statutArticle,a.introTexteArticle,
            a.descriptionArticle as descriptionArticle,a.articleAjoutPar as articleAjoutPar,
            a.articleDateAjout as articleDateAjout, m.urlMedia as urlMedia,m.typeMedia as typeMedia
            FROM utbAdminBundle:Article a INNER JOIN a.rubrique r  INNER JOIN a.medias m
            WHERE m.illustreImgMedia=1 AND a.archiveArticle!=1 AND a.corbeilleArticle!=1 
            and trim(a.titreArticle) !=:vide ORDER BY a.ordre,a.id DESC
             ');
        $query->setParameter('vide', '');
        $query->setHint(
            \Doctrine\ORM\Query::HINT_CUSTOM_OUTPUT_WALKER,
            'Gedmo\\Translatable\\Query\\TreeWalker\\TranslationWalker'
        );
        // Force the locale
        $query->setHint(
            \Gedmo\Translatable\TranslatableListener::HINT_TRANSLATABLE_LOCALE,
            $locale
        );
        return count($query->getResult());
    }

    /**
     *  Methode pour avoir le total des articles archives sur le twig listeArticleArchive.twig
     * 
     * Table(s):  Rubrique, Article, Media
     * 
     * @param <string> $locale : Variable passee pour gerer le multilingue sur le site
     * @param <integer> $page :  Variable intervenant dans la pagination
     * @param <integer> $total :  Nombre total d'article
     * @param <integer> $articles_per_page :  Nombre d'article par page
     * 
     * @return <string> return le  count du resultat d'une requete    
     * 
     */
    public function getTotalListeArchiveLocale($locale)
    {
        $query = $this->getEntityManager()->createQuery('SELECT r.id as idrubrique,r.nomRubrique as nomRubrique,
            a.id as id, a.titreArticle as titreArticle, a.statutArticle as statutArticle,a.introTexteArticle,
            a.descriptionArticle as descriptionArticle,a.articleAjoutPar as articleAjoutPar,
            a.articleDateAjout as articleDateAjout, m.urlMedia as urlMedia,m.typeMedia as typeMedia
            FROM utbAdminBundle:Article a INNER JOIN a.rubrique r  INNER JOIN a.medias m
            WHERE m.illustreImgMedia=1 AND a.archiveArticle=1 AND a.corbeilleArticle!=1 
            and trim(a.titreArticle) !=:vide ORDER BY a.ordre,a.id DESC');

        $query->setParameter('vide', '');
        $query->setHint(
            \Doctrine\ORM\Query::HINT_CUSTOM_OUTPUT_WALKER,
            'Gedmo\\Translatable\\Query\\TreeWalker\\TranslationWalker'
        );
        // Force the locale
        $query->setHint(
            \Gedmo\Translatable\TranslatableListener::HINT_TRANSLATABLE_LOCALE,
            $locale
        );
        return count($query->getResult());
    }

    /**
     *  Methode pour avoir le total des articles archives sur le twig listeArticleArchive.twig
     * 
     * Table(s):  Rubrique, Article, Media
     * 
     * @param <string> $locale : Variable passee pour gerer le multilingue sur le site
     * @param <integer> $page :  Variable intervenant dans la pagination
     * @param <integer> $total :  Nombre total d'article
     * @param <integer> $articles_per_page :  Nombre d'article par page
     * 
     * @return <string> return le  resultat d'une requete
     * 
     */
    public function findAllByLocaleArchive($locale = 'en', $total, $page, $articles_per_page)
    {
        $query = $this->getEntityManager()->createQuery('SELECT r.id as idrubrique,r.nomRubrique as nomRubrique,
            a.id as id, a.titreArticle as titreArticle, a.statutArticle as statutArticle,a.introTexteArticle,
            a.descriptionArticle as descriptionArticle,a.articleAjoutPar as articleAjoutPar,
            a.articleDateAjout as articleDateAjout, m.urlMedia as urlMedia,m.typeMedia as typeMedia
            FROM utbAdminBundle:Article a INNER JOIN a.rubrique r  INNER JOIN a.medias m
            WHERE m.illustreImgMedia=1 AND a.archiveArticle=1 AND a.corbeilleArticle!=1 
            and trim(a.titreArticle) !=:vide
            ORDER BY a.ordre,a.id DESC');

        $query->setParameter('vide', '');
        $query->setFirstResult(($page * $articles_per_page) - $articles_per_page);
        $query->setMaxResults($articles_per_page);

        $query->setHint(
            \Doctrine\ORM\Query::HINT_CUSTOM_OUTPUT_WALKER,
            'Gedmo\\Translatable\\Query\\TreeWalker\\TranslationWalker'
        );
        // Force the locale
        $query->setHint(
            \Gedmo\Translatable\TranslatableListener::HINT_TRANSLATABLE_LOCALE,
            $locale
        );
        return $query->getResult();
    }

    /**
     *  Methode pour avoir la liste des articles archives sur le twig oneRubriqueArchive.twig
     * 
     * Table(s):  Rubrique, Article, Media
     * 
     * @param <string> $locale : Variable passee pour gerer le multilingue sur le site
     * @param <integer> $page :  Variable intervenant dans la pagination
     * @param <integer> $total :  Nombre total d'article
     * @param <integer> $articles_per_page :  Nombre d'article par page
     * 
     * @return <string> return le  resultat d'une requete
     * 
     */
    public function findAllArticleByLocaleArchive($type, $locale = 'en', $total, $page, $articles_per_page)
    {
        $query = $this->getEntityManager()->createQuery('SELECT r.id as idrubrique,r.nomRubrique as nomRubrique,
            a.id as id, a.titreArticle as titreArticle, a.statutArticle as statutArticle,a.introTexteArticle,
            a.descriptionArticle as descriptionArticle,a.articleAjoutPar as articleAjoutPar,
            a.articleDateAjout as articleDateAjout, m.urlMedia as urlMedia,m.typeMedia as typeMedia
            FROM utbAdminBundle:Article a INNER JOIN a.rubrique r  INNER JOIN a.medias m
            WHERE m.illustreImgMedia=1 AND a.archiveArticle=1 AND a.corbeilleArticle!=1 and r.id=:type 
            and trim(a.titreArticle) !=:vide ORDER BY a.ordre,a.id DESC');

        $query->setParameters(array('type' => $type, 'vide' => ''));

        $query->setFirstResult(($page * $articles_per_page) - $articles_per_page);
        $query->setMaxResults($articles_per_page);

        $query->setHint(
            \Doctrine\ORM\Query::HINT_CUSTOM_OUTPUT_WALKER,
            'Gedmo\\Translatable\\Query\\TreeWalker\\TranslationWalker'
        );
        // Force the locale
        $query->setHint(
            \Gedmo\Translatable\TranslatableListener::HINT_TRANSLATABLE_LOCALE,
            $locale
        );
        return $query->getResult();
    }

    /**
     *  Methode pour avoir le total des articles soumis pour validation sur la page listeArticleSoumis.html.twig
     * 
     * Table(s):  Rubrique, Article, Media
     * 
     * @param <string> $locale : Variable passee pour gerer le multilingue sur le site
     * 
     * @return <string> return le  count du resultat d'une requete
     * 
     */
    public function getTotalSoumisLocale($locale)
    {
        $qb = $this->createQueryBuilder('a');
        $qb->select('COUNT(a.id)')
            ->innerJoin('a.rubrique', 'r')
            ->innerJoin('a.medias', 'm')
            ->where('a.corbeilleArticle = 0')
            ->andWhere('a.archiveArticle = 0')
            ->andWhere('a.statutArticle = 2')
            ->andWhere('m.illustreImgMedia = 1')
            ->andWhere('trim(a.titreArticle) != :vide')
            ->setParameter('vide', '');

        $query = $qb->getQuery();
        $query->setHint(
            \Doctrine\ORM\Query::HINT_CUSTOM_OUTPUT_WALKER,
            'Gedmo\\Translatable\\Query\\TreeWalker\\TranslationWalker'
        );
        $query->setHint(
            \Gedmo\Translatable\TranslatableListener::HINT_TRANSLATABLE_LOCALE,
            $locale
        );

        return $query->getSingleScalarResult();
    }

    /**
     *  Methode pour afficher les actualités sur la page d'accueil
     * 
     * Table(s):  Article, Media
     * 
     * @param <string> $locale : Variable passee pour gerer le multilingue sur le site
     * @param <integer> $type : Type d'article (4 pour actualités)
     * @param <integer> $limit : Nombre d'articles à afficher
     * @param <integer> $statut : Statut de l'article (2 pour soumis)
     * 
     * @return <string> return le resultat d'une requete
     */
    public function afficherActuAccueil($locale, $type, $limit, $statut)
    {
        $qb = $this->createQueryBuilder('a');
        $qb->select('a.id as id, a.titreArticle as titreArticle, a.introTexteArticle as introTexteArticle, 
                    a.descriptionArticle as descriptionArticle, a.articleDateAjout as articleDateAjout,
                    m.urlMedia as urlMedia, m.typeMedia as typeMedia')
            ->innerJoin('a.medias', 'm')
            ->where('a.corbeilleArticle = 0')
            ->andWhere('a.archiveArticle = 0')
            ->andWhere('a.statutArticle = :statut')
            ->andWhere('m.illustreImgMedia = 1')
            ->andWhere('trim(a.titreArticle) != :vide')
            ->setParameter('statut', $statut)
            ->setParameter('vide', '')
            ->orderBy('a.ordre', 'DESC')
            ->addOrderBy('a.id', 'DESC')
            ->setMaxResults($limit);

        $query = $qb->getQuery();
        $query->setHint(
            \Doctrine\ORM\Query::HINT_CUSTOM_OUTPUT_WALKER,
            'Gedmo\\Translatable\\Query\\TreeWalker\\TranslationWalker'
        );
        $query->setHint(
            \Gedmo\Translatable\TranslatableListener::HINT_TRANSLATABLE_LOCALE,
            $locale
        );

        return $query->getResult();
    }

    /**
     *  Methode pour afficher les brèves sur la page d'accueil
     * 
     * Table(s):  Article, Media
     * 
     * @param <string> $locale : Variable passee pour gerer le multilingue sur le site
     * @param <integer> $type : Type d'article (6 pour brèves)
     * @param <integer> $limit : Nombre d'articles à afficher
     * @param <integer> $statut : Statut de l'article (2 pour soumis)
     * 
     * @return <string> return le resultat d'une requete
     */
    public function afficherBreveAccueil($locale, $type, $limit, $statut)
    {
        $qb = $this->createQueryBuilder('a');
        $qb->select('a.id as id, a.titreArticle as titreArticle, a.introTexteArticle as introTexteArticle, 
                    a.descriptionArticle as descriptionArticle, a.articleDateAjout as articleDateAjout,
                    m.urlMedia as urlMedia, m.typeMedia as typeMedia')
            ->innerJoin('a.medias', 'm')
            ->where('a.corbeilleArticle = 0')
            ->andWhere('a.archiveArticle = 0')
            ->andWhere('a.statutArticle = :statut')
            ->andWhere('m.illustreImgMedia = 1')
            ->andWhere('trim(a.titreArticle) != :vide')
            ->setParameter('statut', $statut)
            ->setParameter('vide', '')
            ->orderBy('a.ordre', 'DESC')
            ->addOrderBy('a.id', 'DESC')
            ->setMaxResults($limit);

        $query = $qb->getQuery();
        $query->setHint(
            \Doctrine\ORM\Query::HINT_CUSTOM_OUTPUT_WALKER,
            'Gedmo\\Translatable\\Query\\TreeWalker\\TranslationWalker'
        );
        $query->setHint(
            \Gedmo\Translatable\TranslatableListener::HINT_TRANSLATABLE_LOCALE,
            $locale
        );

        return $query->getResult();
    }

    public function afficherUneRubriqueLocale($id, $locale)
    {
        $qb = $this->createQueryBuilder('a')
            ->select(
                'a.id as id',
                'a.titreArticle as titreArticle',
                'a.contenuArticle as contenuArticle',
                'a.dateArticle as dateArticle',
                'a.statutArticle as statutArticle',
                'r.id as idrubrique',
                'r.nomRubrique as nomRubrique',
                'r.typePresentation as typePresentation',
                'm.id as idmedia',
                'm.urlMedia as urlMedia',
                'm.typeMedia as typeMedia'
            )
            ->join('a.rubrique', 'r')
            ->join('a.medias', 'm')
            ->where('r.parent = :type')
            ->andWhere('a.statutArticle = 4')
            ->setParameter('type', $id);

        $query = $qb->getQuery();
        $query->setHint(
            \Doctrine\ORM\Query::HINT_CUSTOM_OUTPUT_WALKER,
            'Gedmo\\Translatable\\Query\\TreeWalker\\TranslationWalker'
        );
        $query->setHint(
            \Gedmo\Translatable\TranslatableListener::HINT_TRANSLATABLE_LOCALE,
            $locale
        );

        return $query->getResult();
    }
}
