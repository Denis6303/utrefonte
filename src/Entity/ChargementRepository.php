<?php

namespace App\Entity;

use Doctrine\ORM\EntityRepository;
use \PDO;

/**
 * ChargementRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ChargementRepository extends EntityRepository {

    /**
     * 
     * @param array $file_list: liste de nom de fichier à charger
     * @param type $dir : chemin d'acces (path) du dossier contenant les fichiers a envoyer
     * @return int: le resultat du traitement 0 pr reussite et 1 pour echec
     */
    public function loadMethod(array $file_list, $dir) {
        // $file_list est un tableau d'objets Chargement 
        $res = 0;
        $sqldelete = '';
        $sql = '';
        if (count($sqldelete) > 0) {
            foreach ($file_list as $a_temp) {

                $a_file = $this->_em->getRepository("utbClientBundle:Chargement")->find($a_temp['id']);

                $sql = " CALL TraitementFiles (:idfile) ";

                $stmttraitement = $this->getEntityManager()
                        ->getConnection()
                        ->prepare($sql);

                $stmttraitement->bindValue(':idfile', $a_file->getId(), PDO::PARAM_INT);
                try {
                    $stmttraitement->execute();
                } catch (\Exception $e) {
                    $res = 1;
                }
            }
        }
        return $res;
    }

    /**
     * 
     * @param type $idtypeCompte : type de compte afbw - afbw2 - uweb
     * @param type $idtypeChargement :type de chargement intervallaire (journalier - mensuel)
     * @param type $debut : date debut periode intervallaire
     * @param type $fin : fin debut periode intervallaire
     * @return int : le resultat du traitement 0 pr aucun compte existant et 1 pour existence de compte de ce genre
     */
    public function checkSiTypeExist($idtypeCompte, $idtypeChargement, $debut, $fin) {

        $paramdeb = null;
        $paramfin = null;
        $param = array();

        if (( ($debut != null) || ($debut != 0) ) && (($fin != null) || ($fin != 0) )) {
            $datedeb = new \DateTime();
            $datedeb->setDate(substr($debut, 6, 4), substr($debut, 3, 2), substr($debut, 0, 2));
            $datefin = new \DateTime();
            $datefin->setDate(substr($fin, 6, 4), substr($fin, 3, 2), substr($fin, 0, 2));
            $paramdeb = $datedeb->format("Y-m-d");
            $paramfin = $datefin->format("Y-m-d H:i:s");
            ;
        }

        // $file_list est un tableau d'objets Chargement 
        $sql = '';
        $sql = 'SELECT COUNT(c.id) 
                FROM utbClientBundle:Chargement c 
                inner join c.typeCompte t 
                Where t.id = :typeCpte  ';

        ($idtypeChargement == 0) ? $sql .= '' : $sql .= ' AND c.typeChargement = :typeChg ';

        ( ($debut == null) || ($debut == '0') ) ?
                        $sql.='' :
                        $sql.=" AND c.dateDeb >= " . " '" . $paramdeb . "' " . " " . " and c.dateFin <= " . " " . " '" . $paramfin . "' ";

        $q2 = null;
        $q2 = $this->_em->createQuery($sql);

        ($idtypeCompte == 0) ? $sql.='' : $param['typeCpte'] = $idtypeCompte;
        ($idtypeChargement == 0) ?
                        $sql.='' : $param['typeChg'] = $idtypeChargement;

        $q2->setParameters($param);

        try {
            $lavaleur = $q2->getSingleScalarResult();
        } catch (\Doctrine\ORM\NoResultException $e) {
            $lavaleur = 0;
        }

        return $lavaleur;
    }

    /**
     * 
     * @param type $idfile : identifiant du fichier a charger
     * @param type $path : chemin d'acces du fichier en question
     * @return int: le resultat du traitement 0 pr reussite et 1 pour echec
     */
    public function loadFile($idfile, $path) {
        // $file_list est un tableau d'objets Chargement 
        $res = 0;

        // variables de test
        $isFirstDate = False; $isLastDate = False;  $inter = null;

        // type de chargement
        $typeChg = null;

        /* recuperation du fichier */
        $a_file = $this->_em->getRepository("utbClientBundle:Chargement")->find($idfile);

        /** Début suppression des données précédemment dans les tables * */
        if ($a_file != null) {
            $typeChg = $a_file->getTypeChargement();
            if ($typeChg == 0) {
                if ($a_file->getDateDeb()->format('d') == '01')
                    $isFirstDate = true;
                if ($a_file->getDateFin()->format('d') == $a_file->getDateFin()->format('t'))
                    $isLastDate = true;
            }

            /** Début chargement en lot des données  * */
            $sql = " LOAD DATA INFILE :fichier INTO TABLE  ";
            if ($a_file->getTypeCompte()->getId() == 1) {
                $sql .= " afbwtmp ";
            } elseif ($a_file->getTypeCompte()->getId() == 2) {
                $sql .= " afbw2tmp ";
            } elseif ($a_file->getTypeCompte()->getId() == 3) {
                $sql .= " uwebtmp ";
            }
            $sql .= "  FIELDS TERMINATED BY '' ENCLOSED BY ''
                         (  ";


            /*             * *** determination des champs à référencer suivant les type de fichiers à charger ***** */
            if ($a_file->getTypeCompte()->getId() == 1) {
                $sql .= " cdenr,cdbque,res21,cdgui,deviso,virgul,monori,nocpte,codop,datope,motrej,datval,libel,res22,noecri,exocom,indind,montan,refer";
            } elseif ($a_file->getTypeCompte()->getId() == 2) {
                $sql .= " cdenr,cdbque,cdgui,nocpte,cdafb,cdcoib,datope,res13,datval,libel,cdexo,montan,res23,sens";
            } elseif ($a_file->getTypeCompte()->getId() == 3) {
                $sql .= " numcpt,intitu,datope,libel,datval,montan,sign,codope,even,nomvt,sldlig,signsldlign,lrdesc,rgribb,rgrib";
            }



            /*             * *** Champs dont les valeurs seront fixées suivant les types de fichiers ***** */
            if ($a_file->getTypeCompte()->getId() == 1) {
                $sql .= " ) SET periode = '' , ";
                $sql .= " selected = case ";
                if ($isFirstDate) {
                    $sql .= " when (cdenr = '01') then 1 ";
                } elseif (!$isFirstDate) {
                    $sql .= " when (cdenr = '01') then 0 ";
                }
                if ($isLastDate) {
                    $sql .= " when (cdenr = '07') then 1 ";
                } elseif (!$isLastDate) {
                    $sql .= " when (cdenr = '07') then 0 ";
                }
                $sql .= " when (cdenr = '04') then 1 ";
                $sql .= "  end ";
            } elseif ($a_file->getTypeCompte()->getId() == 2) {
                $sql .= "   ) SET periode = ''  ,";
                $sql .= " selected = case ";
                if ($isFirstDate) {
                    $sql .= " when (cdenr = '01') then 1 ";
                } elseif (!$isFirstDate) {
                    $sql .= " when (cdenr = '01') then 0 ";
                }
                if ($isLastDate) {
                    $sql .= " when (cdenr = '07') then 1 ";
                } elseif (!$isLastDate) {
                    $sql .= " when (cdenr = '07') then 0 ";
                }
                $sql .= " when (cdenr = '04') then 1 ";
                $sql .= "  end ";
            } elseif ($a_file->getTypeCompte()->getId() == 3) {
                $sql .= "   ) SET periode = replace(datval,'/',' ') , ";

                $sql .= " selected = case ";
                if ($isFirstDate) {
                    $sql .= " when ( trim(libel) = 'SOLDE DEBUT PERIODE') then 1 ";
                } elseif (!$isFirstDate) {
                    $sql .= " when ( trim(libel) = 'SOLDE DEBUT PERIODE') then 0 ";
                }
                if ($isLastDate) {
                    $sql .= " when ( trim(libel) = 'SOLDE FIN PERIODE') then 1 ";
                } elseif (!$isLastDate) {
                    $sql .= " when ( trim(libel) = 'SOLDE FIN PERIODE') then 0 ";
                }
                $sql .= " when ( (trim(libel) <> 'SOLDE FIN PERIODE')
                                     and
                                    (trim(libel) <> 'SOLDE DEBUT PERIODE')
                                   ) then 1 ";
                $sql .= "  end ";
            }

            $sql .= "   ,traite = 0,idfile = :idfile ";

            $stmt = $this->getEntityManager()
                    ->getConnection()
                    ->prepare($sql);
            
            // var_dump($sql);  exit;

            $stmt->bindValue(':fichier', $path . $a_file->getUrlFile(), PDO::PARAM_STR);
            $stmt->bindValue(':idfile', $idfile, PDO::PARAM_STR);

            try {
                $stmt->execute();
            } catch (\PDOException $e) {
                // var_dump($e);
                var_dump($e->getMessage());
                $res = 1;
                exit;
                
            }
        }
        return $res;
    }

    /**
     * Cette methode retourne une liste les instances de l'objet fichier
     * dans un tableau
     * 
     * @param type $idtype: type de compte afbw -afbw2 - uweb
     * @return suivant le precedent parametres un tableau de fichiers ou un fichier
     */
    public function getListeFiles($idtype) {
        // $file_list est un tableau d'objets Chargement 
        $sql = 'SELECT c.id , c.nomFile,c.urlFile,t.id as typeCompte 
                FROM   utbClientBundle:Chargement c 
                INNER join c.typeCompte t ';

        ( $idtype == 0) ?
                        $sql .= '' :
                        $sql .= 'WHERE c.id =:idfile ';

        $q2 = null;
        $q2 = $this->_em->createQuery($sql);

        ( $idtype == 0) ?
                        $sql .= '' :
                        $q2->setParameter('idfile', $idtype);

        try {
            $lavaleur = $q2->getResult();
        } catch (\Doctrine\ORM\NoResultException $e) {
            $lavaleur = null;
        }

        return $lavaleur;
    }

    /**
     * 
     * @param type $idFile : Identifiant du fichier 
     * @return null
     */
    public function getInfosSurChargement($idFile) {
        // $file_list est un tableau d'objets Chargement 
        $q2 = null;
        $sql = 'SELECT i.id,i.typeCompte,i.nbreTotalLigne,
                            i.nbreImportLigne,i.prcentImport,
                            i.nbreCpteInexistant,i.datestat,i.idfile
                     FROM utbClientBundle:InfosAfterLoad i ';
        ($idFile == 0) ? $sql.='' : $sql.=' WHERE i.idfile = :file';
        $q2 = $this->_em->createQuery($sql);

        ($idFile == 0) ? $sql.='' : $q2->setParameters(array('file' => $idFile));

        try {
            $lavaleur = $q2->getResult();
        } catch (\Doctrine\ORM\NoResultException $e) {
            $lavaleur = null;
        }
        return $lavaleur;
    }

    /**
     * 
     * @param type $idfile: identifiant du fichier à supprimer
     * @return int
     */
    public function deleteHistoryFile($idfile) {
        // $file_list est un tableau d'objets Chargement 
        $res = 0;
        /* recuperation du fichier */
        $a_file = $this->_em->getRepository("utbClientBundle:Chargement")->find($idfile);

        /** Début suppression des données précédemment dans les tables * */
        if ($a_file != null) {
            /** Début chargement en lot des données  * */
            $sql = " call deleteFiles (:idfile)  ";
            $stmt = $this->getEntityManager()
                    ->getConnection()
                    ->prepare($sql);
            $stmt->bindValue(':idfile', $idfile, PDO::PARAM_INT);

            try {
                $stmt->execute();
            } catch (\Exception $e) {
                $res = 1;
            }
        }
        return $res;
    }

}
